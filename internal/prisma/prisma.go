// Code generated by Prisma CLI (https://github.com/prisma/prisma). DO NOT EDIT.

package prisma

import (
	"context"
	"errors"

	"github.com/prisma/prisma-client-lib-go"
	"github.com/machinebox/graphql"
)

var ErrNoResult = errors.New("query returned no result")

func Str(v string) *string { return &v }
func Int32(v int32) *int32 { return &v }
func Bool(v bool) *bool    { return &v }

type BatchPayloadExec struct {
	exec *prisma.BatchPayloadExec
}

func (exec *BatchPayloadExec) Exec(ctx context.Context) (BatchPayload, error) {
	bp, err := exec.exec.Exec(ctx)
	return BatchPayload(bp), err
}

type BatchPayload struct {
	Count int64 `json:"count"`
}

type Aggregate struct {
	Count int64 `json:"count"`
}

type Client struct {
	Client *prisma.Client
}

type Options struct {
	Endpoint string
	Secret   string
}

func New(options *Options, opts ...graphql.ClientOption) *Client {
	endpoint := DefaultEndpoint
	secret := Secret
	if options != nil {
		endpoint = options.Endpoint
		secret = options.Secret
	}
	return &Client{
		Client: prisma.New(endpoint, secret, opts...),
	}
}

func (client *Client) GraphQL(ctx context.Context, query string, variables map[string]interface{}) (map[string]interface{}, error) {
	return client.Client.GraphQL(ctx, query, variables)
}

var DefaultEndpoint = "https://us1.prisma.sh/nick-calibey-372849/internal/dev"
var Secret = ""

func (client *Client) Link(params LinkWhereUniqueInput) *LinkExec {
	ret := client.Client.GetOne(
		nil,
		params,
		[2]string{"LinkWhereUniqueInput!", "Link"},
		"link",
		[]string{"id", "createdAt", "description", "url"})

	return &LinkExec{ret}
}

type LinksParams struct {
	Where   *LinkWhereInput   `json:"where,omitempty"`
	OrderBy *LinkOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32            `json:"skip,omitempty"`
	After   *string           `json:"after,omitempty"`
	Before  *string           `json:"before,omitempty"`
	First   *int32            `json:"first,omitempty"`
	Last    *int32            `json:"last,omitempty"`
}

func (client *Client) Links(params *LinksParams) *LinkExecArray {
	var wparams *prisma.WhereParams
	if params != nil {
		wparams = &prisma.WhereParams{
			Where:   params.Where,
			OrderBy: (*string)(params.OrderBy),
			Skip:    params.Skip,
			After:   params.After,
			Before:  params.Before,
			First:   params.First,
			Last:    params.Last,
		}
	}

	ret := client.Client.GetMany(
		nil,
		wparams,
		[3]string{"LinkWhereInput", "LinkOrderByInput", "Link"},
		"links",
		[]string{"id", "createdAt", "description", "url"})

	return &LinkExecArray{ret}
}

type LinksConnectionParams struct {
	Where   *LinkWhereInput   `json:"where,omitempty"`
	OrderBy *LinkOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32            `json:"skip,omitempty"`
	After   *string           `json:"after,omitempty"`
	Before  *string           `json:"before,omitempty"`
	First   *int32            `json:"first,omitempty"`
	Last    *int32            `json:"last,omitempty"`
}

func (client *Client) LinksConnection(params *LinksConnectionParams) *LinkConnectionExec {
	var wparams *prisma.WhereParams
	if params != nil {
		wparams = &prisma.WhereParams{
			Where:   params.Where,
			OrderBy: (*string)(params.OrderBy),
			Skip:    params.Skip,
			After:   params.After,
			Before:  params.Before,
			First:   params.First,
			Last:    params.Last,
		}
	}

	ret := client.Client.GetMany(
		nil,
		wparams,
		[3]string{"LinkWhereInput", "LinkOrderByInput", "Link"},
		"linksConnection",
		[]string{"edges", "pageInfo"})

	return &LinkConnectionExec{ret}
}

func (client *Client) CreateLink(params LinkCreateInput) *LinkExec {
	ret := client.Client.Create(
		params,
		[2]string{"LinkCreateInput!", "Link"},
		"createLink",
		[]string{"id", "createdAt", "description", "url"})

	return &LinkExec{ret}
}

type LinkUpdateParams struct {
	Data  LinkUpdateInput      `json:"data"`
	Where LinkWhereUniqueInput `json:"where"`
}

func (client *Client) UpdateLink(params LinkUpdateParams) *LinkExec {
	ret := client.Client.Update(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[3]string{"LinkUpdateInput!", "LinkWhereUniqueInput!", "Link"},
		"updateLink",
		[]string{"id", "createdAt", "description", "url"})

	return &LinkExec{ret}
}

type LinkUpdateManyParams struct {
	Data  LinkUpdateManyMutationInput `json:"data"`
	Where *LinkWhereInput             `json:"where,omitempty"`
}

func (client *Client) UpdateManyLinks(params LinkUpdateManyParams) *BatchPayloadExec {
	exec := client.Client.UpdateMany(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[2]string{"LinkUpdateManyMutationInput!", "LinkWhereInput"},
		"updateManyLinks")
	return &BatchPayloadExec{exec}
}

type LinkUpsertParams struct {
	Where  LinkWhereUniqueInput `json:"where"`
	Create LinkCreateInput      `json:"create"`
	Update LinkUpdateInput      `json:"update"`
}

func (client *Client) UpsertLink(params LinkUpsertParams) *LinkExec {
	uparams := &prisma.UpsertParams{
		Where:  params.Where,
		Create: params.Create,
		Update: params.Update,
	}
	ret := client.Client.Upsert(
		uparams,
		[4]string{"LinkWhereUniqueInput!", "LinkCreateInput!", "LinkUpdateInput!", "Link"},
		"upsertLink",
		[]string{"id", "createdAt", "description", "url"})

	return &LinkExec{ret}
}

func (client *Client) DeleteLink(params LinkWhereUniqueInput) *LinkExec {
	ret := client.Client.Delete(
		params,
		[2]string{"LinkWhereUniqueInput!", "Link"},
		"deleteLink",
		[]string{"id", "createdAt", "description", "url"})

	return &LinkExec{ret}
}

func (client *Client) DeleteManyLinks(params *LinkWhereInput) *BatchPayloadExec {
	exec := client.Client.DeleteMany(params, "LinkWhereInput", "deleteManyLinks")
	return &BatchPayloadExec{exec}
}

type LinkOrderByInput string

const (
	LinkOrderByInputIDAsc           LinkOrderByInput = "id_ASC"
	LinkOrderByInputIDDesc          LinkOrderByInput = "id_DESC"
	LinkOrderByInputCreatedAtAsc    LinkOrderByInput = "createdAt_ASC"
	LinkOrderByInputCreatedAtDesc   LinkOrderByInput = "createdAt_DESC"
	LinkOrderByInputDescriptionAsc  LinkOrderByInput = "description_ASC"
	LinkOrderByInputDescriptionDesc LinkOrderByInput = "description_DESC"
	LinkOrderByInputUrlAsc          LinkOrderByInput = "url_ASC"
	LinkOrderByInputUrlDesc         LinkOrderByInput = "url_DESC"
)

type MutationType string

const (
	MutationTypeCreated MutationType = "CREATED"
	MutationTypeUpdated MutationType = "UPDATED"
	MutationTypeDeleted MutationType = "DELETED"
)

type LinkWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type LinkWhereInput struct {
	ID                       *string          `json:"id,omitempty"`
	IDNot                    *string          `json:"id_not,omitempty"`
	IDIn                     []string         `json:"id_in,omitempty"`
	IDNotIn                  []string         `json:"id_not_in,omitempty"`
	IDLt                     *string          `json:"id_lt,omitempty"`
	IDLte                    *string          `json:"id_lte,omitempty"`
	IDGt                     *string          `json:"id_gt,omitempty"`
	IDGte                    *string          `json:"id_gte,omitempty"`
	IDContains               *string          `json:"id_contains,omitempty"`
	IDNotContains            *string          `json:"id_not_contains,omitempty"`
	IDStartsWith             *string          `json:"id_starts_with,omitempty"`
	IDNotStartsWith          *string          `json:"id_not_starts_with,omitempty"`
	IDEndsWith               *string          `json:"id_ends_with,omitempty"`
	IDNotEndsWith            *string          `json:"id_not_ends_with,omitempty"`
	CreatedAt                *string          `json:"createdAt,omitempty"`
	CreatedAtNot             *string          `json:"createdAt_not,omitempty"`
	CreatedAtIn              []string         `json:"createdAt_in,omitempty"`
	CreatedAtNotIn           []string         `json:"createdAt_not_in,omitempty"`
	CreatedAtLt              *string          `json:"createdAt_lt,omitempty"`
	CreatedAtLte             *string          `json:"createdAt_lte,omitempty"`
	CreatedAtGt              *string          `json:"createdAt_gt,omitempty"`
	CreatedAtGte             *string          `json:"createdAt_gte,omitempty"`
	Description              *string          `json:"description,omitempty"`
	DescriptionNot           *string          `json:"description_not,omitempty"`
	DescriptionIn            []string         `json:"description_in,omitempty"`
	DescriptionNotIn         []string         `json:"description_not_in,omitempty"`
	DescriptionLt            *string          `json:"description_lt,omitempty"`
	DescriptionLte           *string          `json:"description_lte,omitempty"`
	DescriptionGt            *string          `json:"description_gt,omitempty"`
	DescriptionGte           *string          `json:"description_gte,omitempty"`
	DescriptionContains      *string          `json:"description_contains,omitempty"`
	DescriptionNotContains   *string          `json:"description_not_contains,omitempty"`
	DescriptionStartsWith    *string          `json:"description_starts_with,omitempty"`
	DescriptionNotStartsWith *string          `json:"description_not_starts_with,omitempty"`
	DescriptionEndsWith      *string          `json:"description_ends_with,omitempty"`
	DescriptionNotEndsWith   *string          `json:"description_not_ends_with,omitempty"`
	Url                      *string          `json:"url,omitempty"`
	UrlNot                   *string          `json:"url_not,omitempty"`
	UrlIn                    []string         `json:"url_in,omitempty"`
	UrlNotIn                 []string         `json:"url_not_in,omitempty"`
	UrlLt                    *string          `json:"url_lt,omitempty"`
	UrlLte                   *string          `json:"url_lte,omitempty"`
	UrlGt                    *string          `json:"url_gt,omitempty"`
	UrlGte                   *string          `json:"url_gte,omitempty"`
	UrlContains              *string          `json:"url_contains,omitempty"`
	UrlNotContains           *string          `json:"url_not_contains,omitempty"`
	UrlStartsWith            *string          `json:"url_starts_with,omitempty"`
	UrlNotStartsWith         *string          `json:"url_not_starts_with,omitempty"`
	UrlEndsWith              *string          `json:"url_ends_with,omitempty"`
	UrlNotEndsWith           *string          `json:"url_not_ends_with,omitempty"`
	And                      []LinkWhereInput `json:"AND,omitempty"`
	Or                       []LinkWhereInput `json:"OR,omitempty"`
	Not                      []LinkWhereInput `json:"NOT,omitempty"`
}

type LinkCreateInput struct {
	ID          *string `json:"id,omitempty"`
	Description string  `json:"description"`
	Url         string  `json:"url"`
}

type LinkUpdateInput struct {
	Description *string `json:"description,omitempty"`
	Url         *string `json:"url,omitempty"`
}

type LinkUpdateManyMutationInput struct {
	Description *string `json:"description,omitempty"`
	Url         *string `json:"url,omitempty"`
}

type LinkSubscriptionWhereInput struct {
	MutationIn                 []MutationType               `json:"mutation_in,omitempty"`
	UpdatedFieldsContains      *string                      `json:"updatedFields_contains,omitempty"`
	UpdatedFieldsContainsEvery []string                     `json:"updatedFields_contains_every,omitempty"`
	UpdatedFieldsContainsSome  []string                     `json:"updatedFields_contains_some,omitempty"`
	Node                       *LinkWhereInput              `json:"node,omitempty"`
	And                        []LinkSubscriptionWhereInput `json:"AND,omitempty"`
	Or                         []LinkSubscriptionWhereInput `json:"OR,omitempty"`
	Not                        []LinkSubscriptionWhereInput `json:"NOT,omitempty"`
}

type LinkExec struct {
	exec *prisma.Exec
}

func (instance LinkExec) Exec(ctx context.Context) (*Link, error) {
	var v Link
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance LinkExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type LinkExecArray struct {
	exec *prisma.Exec
}

func (instance LinkExecArray) Exec(ctx context.Context) ([]Link, error) {
	var v []Link
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type Link struct {
	ID          string `json:"id"`
	CreatedAt   string `json:"createdAt"`
	Description string `json:"description"`
	Url         string `json:"url"`
}

type LinkConnectionExec struct {
	exec *prisma.Exec
}

func (instance *LinkConnectionExec) PageInfo() *PageInfoExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "PageInfo"},
		"pageInfo",
		[]string{"hasNextPage", "hasPreviousPage", "startCursor", "endCursor"})

	return &PageInfoExec{ret}
}

func (instance *LinkConnectionExec) Edges() *LinkEdgeExecArray {
	edges := instance.exec.Client.GetMany(
		instance.exec,
		nil,
		[3]string{"LinkWhereInput", "LinkOrderByInput", "LinkEdge"},
		"edges",
		[]string{"cursor"})

	nodes := edges.Client.GetMany(
		edges,
		nil,
		[3]string{"", "", "Link"},
		"node",
		[]string{"id", "createdAt", "updatedAt", "name", "desc"})

	return &LinkEdgeExecArray{nodes}
}

func (instance *LinkConnectionExec) Aggregate(ctx context.Context) (*Aggregate, error) {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "AggregateLink"},
		"aggregate",
		[]string{"count"})

	var v Aggregate
	_, err := ret.Exec(ctx, &v)
	return &v, err
}

func (instance LinkConnectionExec) Exec(ctx context.Context) (*LinkConnection, error) {
	var v LinkConnection
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance LinkConnectionExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type LinkConnectionExecArray struct {
	exec *prisma.Exec
}

func (instance LinkConnectionExecArray) Exec(ctx context.Context) ([]LinkConnection, error) {
	var v []LinkConnection
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type LinkConnection struct {
	PageInfo PageInfo   `json:"pageInfo"`
	Edges    []LinkEdge `json:"edges"`
}

type PageInfoExec struct {
	exec *prisma.Exec
}

func (instance PageInfoExec) Exec(ctx context.Context) (*PageInfo, error) {
	var v PageInfo
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance PageInfoExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type PageInfoExecArray struct {
	exec *prisma.Exec
}

func (instance PageInfoExecArray) Exec(ctx context.Context) ([]PageInfo, error) {
	var v []PageInfo
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor,omitempty"`
	EndCursor       *string `json:"endCursor,omitempty"`
}

type LinkEdgeExec struct {
	exec *prisma.Exec
}

func (instance *LinkEdgeExec) Node() *LinkExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "Link"},
		"node",
		[]string{"id", "createdAt", "description", "url"})

	return &LinkExec{ret}
}

func (instance LinkEdgeExec) Exec(ctx context.Context) (*LinkEdge, error) {
	var v LinkEdge
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance LinkEdgeExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type LinkEdgeExecArray struct {
	exec *prisma.Exec
}

func (instance LinkEdgeExecArray) Exec(ctx context.Context) ([]LinkEdge, error) {
	var v []LinkEdge
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type LinkEdge struct {
	Node   Link   `json:"node"`
	Cursor string `json:"cursor"`
}

type LinkSubscriptionPayloadExec struct {
	exec *prisma.Exec
}

func (instance *LinkSubscriptionPayloadExec) Node() *LinkExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "Link"},
		"node",
		[]string{"id", "createdAt", "description", "url"})

	return &LinkExec{ret}
}

func (instance *LinkSubscriptionPayloadExec) PreviousValues() *LinkPreviousValuesExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "LinkPreviousValues"},
		"previousValues",
		[]string{"id", "createdAt", "description", "url"})

	return &LinkPreviousValuesExec{ret}
}

func (instance LinkSubscriptionPayloadExec) Exec(ctx context.Context) (*LinkSubscriptionPayload, error) {
	var v LinkSubscriptionPayload
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance LinkSubscriptionPayloadExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type LinkSubscriptionPayloadExecArray struct {
	exec *prisma.Exec
}

func (instance LinkSubscriptionPayloadExecArray) Exec(ctx context.Context) ([]LinkSubscriptionPayload, error) {
	var v []LinkSubscriptionPayload
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type LinkSubscriptionPayload struct {
	Mutation      MutationType `json:"mutation"`
	Node          *Link        `json:"node,omitempty"`
	UpdatedFields []string     `json:"updatedFields,omitempty"`
}

type LinkPreviousValuesExec struct {
	exec *prisma.Exec
}

func (instance LinkPreviousValuesExec) Exec(ctx context.Context) (*LinkPreviousValues, error) {
	var v LinkPreviousValues
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance LinkPreviousValuesExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type LinkPreviousValuesExecArray struct {
	exec *prisma.Exec
}

func (instance LinkPreviousValuesExecArray) Exec(ctx context.Context) ([]LinkPreviousValues, error) {
	var v []LinkPreviousValues
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type LinkPreviousValues struct {
	ID          string `json:"id"`
	CreatedAt   string `json:"createdAt"`
	Description string `json:"description"`
	Url         string `json:"url"`
}
